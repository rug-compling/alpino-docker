diff --git a/include/DactTreeScene.hh b/include/DactTreeScene.hh
index 8b5bae2..95b35a6 100644
--- a/include/DactTreeScene.hh
+++ b/include/DactTreeScene.hh
@@ -1,24 +1,24 @@
 #ifndef DACTTREESCENE_H
 #define DACTTREESCENE_H
 
 #include <QFont>
 #include <QGraphicsItem>
 #include <QGraphicsScene>
 #include <QHash>
 #include <QList>
 #include <QStack>
 
-extern "C" {
+//extern "C" {
     #include <libxml/parser.h>
     #include <libxml/tree.h>
-};
+//};
 
 extern int qt_defaultDpi();
 
 class TreeNode;
 class SecEdge;
 class PopupItem;
 
 class DactTreeScene : public QGraphicsScene
 {
     Q_OBJECT
diff --git a/src/DactTreeScene.cpp b/src/DactTreeScene.cpp
index b2142dd..be996a9 100644
--- a/src/DactTreeScene.cpp
+++ b/src/DactTreeScene.cpp
@@ -1,22 +1,22 @@
 #include <algorithm>
 #include <QDebug>
 #include <QFontMetrics>
 #include <QGraphicsSceneHoverEvent>
 #include <QGraphicsView>
 #include <QPainter>
 #include <QSettings>
 
-extern "C" {
+//extern "C" {
 #include <libxml/parser.h>
 #include <libxml/tree.h>
-}
+//}
 
 #include "DactTreeScene.hh"
 #include "Edge.hh"
 #include "SecEdge.hh"
 #include "TreeNode.hh"
 #include "PopupItem.hh"
 #include "XMLDeleters.hh"
 
 DactTreeScene::DactTreeScene(QObject *parent) :
     QGraphicsScene(parent),
diff --git a/src/SimpleDTD.cpp b/src/SimpleDTD.cpp
index d2ebfff..f05959b 100644
--- a/src/SimpleDTD.cpp
+++ b/src/SimpleDTD.cpp
@@ -2,43 +2,50 @@
 #include <iterator>
 #include <map>
 #include <set>
 #include <stdexcept>
 #include <string>
 
 #include <QScopedPointer>
 #include <QtDebug>
 
 #include <libxml/tree.h>
+#include <libxml/xmlversion.h>
 
 #include <SimpleDTD.hh>
 #include <XMLDeleters.hh>
 
 namespace {
 
-void scanElement(void *payload, void *data, xmlChar *name)
+#if defined(LIBXML_VERSION) && (LIBXML_VERSION >= 20908)
+typedef xmlChar const *xmlCharPtr;
+#else
+typedef xmlChar *xmlCharPtr;
+#endif
+
+void scanElement(void *payload, void *data, xmlCharPtr name)
 {
     xmlElement *elem = reinterpret_cast<xmlElement*>(payload);
     ElementMap *elements = reinterpret_cast<ElementMap *>(data);
 
     std::string elemName = reinterpret_cast<char const *>(elem->name);
 
     // Some elements do not have attributes (e.g. 'sentence' in alpino_ds).
     if (elements->find(elemName) == elements->end())
         (*elements)[elemName] = std::set<std::string>();
 
 
     for (xmlAttributePtr attr = elem->attributes; attr != NULL; attr = reinterpret_cast<xmlAttributePtr>(attr->next))
         (*elements)[elemName].insert(reinterpret_cast<char const *>(attr->name));
 }
 
-void scanAttribute(void *payload, void *data, xmlChar *name)
+void scanAttribute(void *payload, void *data, xmlCharPtr name)
 {
     xmlAttribute *attr = reinterpret_cast<xmlAttribute*>(payload);
     ElementAttributeMap &attributeMap = *reinterpret_cast<ElementAttributeMap *>(data);
 
     char const *elementName(reinterpret_cast<char const *>(attr->elem));
     char const *attributeName(reinterpret_cast<char const *>(attr->name));
 
     AttributeMap::iterator attributeMapPos = attributeMap[elementName].find(attributeName);
     ElementAttributeMap::iterator elementIter = attributeMap.find(elementName);
     
diff --git a/src/XSLTransformer.cpp b/src/XSLTransformer.cpp
index 9f13798..11db533 100644
--- a/src/XSLTransformer.cpp
+++ b/src/XSLTransformer.cpp
@@ -1,24 +1,24 @@
 #include <QByteArray>
 #include <QScopedPointer>
 #include <QTextStream>
 
 #include <stdexcept>
 
-extern "C" {
+//extern "C" {
 #include <libxml/globals.h>
 #include <libxml/parser.h>
 #include <libxml/tree.h>
 #include <libxslt/xslt.h>
 #include <libxslt/transform.h>
 #include <libxslt/xsltutils.h>
-}
+//}
 
 #include <XMLDeleters.hh>
 #include <XSLTransformer.hh>
 #include <QtDebug>
 
 XSLTransformer::XSLTransformer(QFile *file)
 {
     file->open(QIODevice::ReadOnly);
     QTextStream xslStream(file);
     initWithStylesheet(xslStream.readAll());
diff --git a/src/main.cpp b/src/main.cpp
index 61bd13e..636bf21 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -2,26 +2,26 @@
 #include <QFileInfo>
 #include <QFont>
 #include <QSettings>
 #include <QVariant>
 
 #include <cstdlib>
 #include <iostream>
 #include <stdexcept>
 #include <vector>
 
-extern "C" {
+//extern "C" {
 #include <libxslt/xslt.h>
 #include <libxml/parser.h>
 #include <libxml/xpath.h>
 #include <libexslt/exslt.h>
-}
+//}
 
 #include <DactApplication.hh>
 #include <ProgramOptions.hh>
 
 namespace {
     void usage(char const *progname)
     {
         std::cerr << "Usage: " << progname << " [OPTION] corpus ..." <<
           std::endl << std::endl <<
           "  -m filename\tMacro file, multiple files are separated by a colon (:)" << std::endl <<
